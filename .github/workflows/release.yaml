name: Create release

permissions:
  id-token: write
  contents: write
  attestations: write

on:
  push:
    tags:
      - v[0-9]+.[0-9]*.[0-9]*

jobs:
  build-binaries:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.8
      - name: Install depencencies
        run: |
          bun install
      - name: Build command
        run: |
          ./build.sh
      - uses: actions/upload-artifact@v4
        with:
          name: tt-dbt-binaries
          path: ./bin/*
          retention-days: 1

  sign-osx-binary:
    runs-on: macos-latest
    needs: build-binaries
    steps:
      - name: Created directory for binaries
        run: |
          mkdir -p tt-dbt-bin
      - uses: actions/download-artifact@v4
        with:
          name: tt-dbt-binaries
          path: tt-dbt-bin/
      - name: Decode and install the Apple certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_DEVELOPER_IDENTITY_ID: ${{ secrets.APPLE_DEVELOPER_IDENTITY_ID }}
          CODESIGN_PREFIX: "com.tokenterminal"
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Add entitlements to add JIT support
          cat > entitlements.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-executable-page-protection</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security list-keychain -d user -s $KEYCHAIN_PATH

          # Sign the binaries
          /usr/bin/codesign --options runtime --prefix "$CODESIGN_PREFIX" --deep --force --entitlements entitlements.plist -vvvv -s $APPLE_DEVELOPER_IDENTITY_ID --keychain $KEYCHAIN_PATH tt-dbt-bin/tt-dbt-darwin-x64/tt-dbt
          /usr/bin/codesign --options runtime --prefix "$CODESIGN_PREFIX" --deep --force --entitlements entitlements.plist -vvvv -s $APPLE_DEVELOPER_IDENTITY_ID --keychain $KEYCHAIN_PATH tt-dbt-bin/tt-dbt-darwin-arm64/tt-dbt

          # Verify the signature
          codesign -v tt-dbt-bin/tt-dbt-darwin-x64/tt-dbt
          codesign -v tt-dbt-bin/tt-dbt-darwin-arm64/tt-dbt

          # Apple only notarizes zip, pkg and dmg files
           zip -r tt-dbt-darwin-x64.zip tt-dbt-bin/tt-dbt-darwin-x64/tt-dbt
           zip -r tt-dbt-darwin-arm64.zip tt-dbt-bin/tt-dbt-darwin-arm64/tt-dbt

           xcrun notarytool submit tt-dbt-darwin-x64.zip --apple-id $APPLE_ID --team-id $APPLE_TEAM_ID --password $APPLE_APP_SPECIFIC_PASSWORD --wait
           xcrun notarytool submit tt-dbt-darwin-arm64.zip --apple-id $APPLE_ID --team-id $APPLE_TEAM_ID --password $APPLE_APP_SPECIFIC_PASSWORD --wait

          security delete-keychain $KEYCHAIN_PATH
          rm $CERTIFICATE_PATH
      - uses: actions/upload-artifact@v4
        with:
          name: tt-dbt-binaries
          path: tt-dbt-bin/*
          overwrite: true
          retention-days: 1

  release-binaries:
    runs-on: ubuntu-24.04
    needs: sign-osx-binary
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tt-dbt-binaries
          path: tt-dbt-bin/
      - name: Compress the binaries
        env:
          VERSION: ${{ github.ref_name }}
          BINARY_DIR: "tt-dbt-bin"
          OUTPUT_DIR: "releases"
        run: |
          mkdir -p "$OUTPUT_DIR"
          for tt_dbt_binary_dir in "$BINARY_DIR"/tt-dbt-*; do
              binary_name=$(basename "$tt_dbt_binary_dir")
              os_arch_name=$(echo "$binary_name" | cut -d "-" -f3-)

              # Define the compressed file name with version tag
              compressed_file="${OUTPUT_DIR}/tt-dbt-${os_arch_name}-${VERSION}.gz"

              # Compress the binary and rename the file inside the gz
              tar -czf "$compressed_file" -C "$tt_dbt_binary_dir" .

              # Print a message confirming the compression
              echo "Compressed: $compressed_file"
          done
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: releases
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          repository: ${{ github.repository }}
        run: |
          gh release create "$tag" \
              --repo="$repository" \
              --title="${repository#*/} ${tag#v}" \
              --generate-notes \
              ./releases/*.gz

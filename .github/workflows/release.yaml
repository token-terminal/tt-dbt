name: Create release

# Required secrets:
# - APPLE_CERTIFICATE: Base64-encoded Developer ID certificate (p12 file)
# - APPLE_CERTIFICATE_PASSWORD: Password for the certificate
# - APPLE_ID: Apple ID email
# - APPLE_TEAM_ID: Your Apple Developer Team ID
# - APPLE_APP_SPECIFIC_PASSWORD: App-specific password for Apple ID
# - GITHUB_TOKEN: Automatically provided by GitHub

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.[0-9]*.[0-9]*

jobs:
  build-binaries:
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install
          npm install -g pkg

      - name: Build command
        run: |
          ./build.sh

      - name: Import Apple Certificate
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Create macOS App Bundles
        if: runner.os == 'macOS'
        run: |
          for arch in arm64 x64; do
            # Create app bundle structure
            BUNDLE_DIR="./releases/tt-dbt-darwin-$arch.app"
            mkdir -p "$BUNDLE_DIR/Contents/MacOS"
            mkdir -p "$BUNDLE_DIR/Contents/Resources"
            
            # Move binary to app bundle
            mv "./releases/tt-dbt-darwin-$arch" "$BUNDLE_DIR/Contents/MacOS/tt-dbt"
            chmod +x "$BUNDLE_DIR/Contents/MacOS/tt-dbt"
            
            # Create Info.plist
            cat > "$BUNDLE_DIR/Contents/Info.plist" << EOF
               <?xml version="1.0" encoding="UTF-8"?>
               <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
               <plist version="1.0">
               <dict>
                   <key>CFBundlePackageType</key>
                   <string>APPL</string>
                   <key>CFBundleExecutable</key>
                   <string>tt-dbt</string>
                   <key>CFBundleIdentifier</key>
                   <string>com.tokenterminal.tt-dbt</string>
                   <key>CFBundleName</key>
                   <string>tt-dbt</string>
                   <key>CFBundleShortVersionString</key>
                   <string>1.0.0</string>
                   <key>CFBundleVersion</key>
                   <string>1</string>
                   <key>LSMinimumSystemVersion</key>
                   <string>10.10.0</string>
               </dict>
               </plist>
            EOF
          done

      - name: Sign macOS Bundles
        if: runner.os == 'macOS'
        run: |
          # Sign both arm64 and x64 bundles
          for arch in arm64 x64; do
            # First sign the binary inside the bundle
            codesign --force --options runtime,library --timestamp --strict --sign "Developer ID Application" "./releases/tt-dbt-darwin-$arch.app/Contents/MacOS/tt-dbt"
            # Then sign the whole bundle
            codesign --force --options runtime,library --timestamp --strict --sign "Developer ID Application" "./releases/tt-dbt-darwin-$arch.app"
          done

      - name: Notarize macOS Bundles
        if: runner.os == 'macOS'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          for arch in arm64 x64; do
            echo "Notarizing tt-dbt-darwin-$arch.app..."
            
            # Create zip of the app bundle
            ditto -c -k --keepParent "./releases/tt-dbt-darwin-$arch.app" "./releases/tt-dbt-darwin-$arch.zip"
            
            # Submit for notarization and wait for result
            xcrun notarytool submit "./releases/tt-dbt-darwin-$arch.zip" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait
            
            # Staple the notarization ticket to the app bundle
            xcrun stapler staple "./releases/tt-dbt-darwin-$arch.app"
            
            # Clean up zip
            rm "./releases/tt-dbt-darwin-$arch.zip"
          done

      - name: Compress macOS Bundles
        if: runner.os == 'macOS'
        run: |
          # Compress the signed and notarized bundles
          for arch in arm64 x64; do
            ditto -c -k --keepParent "./releases/tt-dbt-darwin-$arch.app" "./releases/tt-dbt-darwin-$arch.gz"
          done

      - name: Create release
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          repository: ${{ github.repository }}
        run: |
          gh release create "$tag" \
              --repo="$repository" \
              --title="${repository#*/} ${tag#v}" \
              --generate-notes \
              ./releases/*.gz

      - name: Upload macOS Bundles
        if: runner.os == 'macOS'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release upload "$tag" ./releases/tt-dbt-darwin-*.gz
